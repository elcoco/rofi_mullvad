#!/usr/bin/env python3

from typing import Optional, Any
import subprocess
import os
from pathlib import Path
import logging
import argparse
import json

DISABLE_ALL_STR = "Disable All"

""" Script assumes that the wireguard profile names begin with a country code.
    This is the case with the mullvad profiles. """


class MullvadException(Exception): pass


class CustomFormatter(logging.Formatter):
    """Logging Formatter to add colors and count warning / errors"""

    format = "%(message)s"

    FORMATS = {
        logging.DEBUG: f"{format}",
        logging.INFO: f"{format}",
        logging.WARNING: f"{format}",
        logging.ERROR: f"{format}",
        logging.CRITICAL: f"{format}",
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)


class RofiLine():
    def __init__(self, name: str, target: Any) -> None:
        self.name = name
        self.target = target


class Rofi():
    """ Class for building rofi apps
          add()   will accept a list or a string, you can call this method
                  multiple times and the result will be added to the rofi args
          show()  show rofi, return result
          sort()  Sorts rofi args in alphabetic order
          reset() is called by show() and resets the rofi args

          It will look for a rofi config file in ~/.config/rofi """

    def __init__(self, theme: str="glue_pro_blue"):
        self._lines = []
        self._rofi_cmd = ["rofi", "-dmenu", "-i",  "-theme-str", "window {width: 300px; height: 700px;}"]
        self._theme = theme
        self._div_width = 20

    def sanitize(self, data, extra_opts = []):
        sanitize_list = [' ', '\'', '\"', '\n'] + extra_opts
        for sanitize in sanitize_list:
            data = data.strip(sanitize)
        return data

    def is_installed(self, application):
        try:
            subprocess.call(application, stdout=subprocess.PIPE)
            return True
        except OSError as e:
            pass

    def run_cmd(self, cmd, lines):
        try:
            child = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
            return child.communicate(lines)[0]
        except FileNotFoundError:
            logger.error(f"Failed to run Rofi")

    def lookup(self, name: str):
        """ Find a line in lines that corresponds with given line """
        return next((l.target for l in self._lines if l.name == name), None)

    def show(self, prompt=False):
        if not self.is_installed(["rofi", "-v"]):
            logger.error("ERROR: Rofi is not installed")
            return

        cmd = self._rofi_cmd

        if self._theme:
            cmd += ["-theme", self._theme]

        cmd += ["-p", prompt or ""]

        lines = [str(line.name) for line in self._lines]
        lines_string = '\n'.join(lines).encode("utf-8")

        result = self.run_cmd(cmd, lines_string)
        result = result.decode('utf-8').strip()

        # Fine corresponding line object
        return self.lookup(result) or result

    def sort(self):
        self._lines = sorted(self._lines)

    def add(self, name: str, target: Any):
        self._lines.append(RofiLine(name, target))

    def add_divider(self, length=None, char="-", text: str=""):
        length = self._div_width if length == None else length

        if text:
            dev_len = int((length-(len(text)+2))/2)
            txt = f"{char*dev_len} {text} "
            self.add(txt + char * (length-len(txt)), None)
        else:
            #self.add(length*char)
            self.add(length*char, None)


class History():
    def __init__(self, path: Path, limit: int=5):
        self._history = []
        self._path = path
        self._limit = limit

    def read(self):
        if self._path.is_file():
            return self._path.read_text().split("\n")
        return []

    def write(self, item: str):
        history = self.read()
        if item in history:
            # Item is already in history so we're moving it to the top
            history.remove(item)

        history.append(item)
        self._path.parent.mkdir(exist_ok=True)
        self._path.write_text("\n".join(history[-self._limit:]))


class Wireguard():
    def run_cmd(self, cmd: list[str], timeout: int=-1, user: Optional[str]=None, envs: Optional[dict[str,str]]=None, cwd: Optional[Path]=None, raise_on_err=True, shell: bool=False):
        # this fixes all sort of localisation issues like ',' for '.' in numbers
        env = os.environ.copy()
        env["LC_ALL"] = "C"

        if envs:
            for k,v in envs.items():
                env[k] = v

        if user:
            cmd = ["sudo", "-u", user] + cmd

        # raises FileNotFoundError if command is not found
        try:
            if timeout > 0:
                result = subprocess.run(cmd, capture_output=True, encoding="utf8", env=env, cwd=cwd, timeout=timeout, shell=shell)
            else:
                result = subprocess.run(cmd, capture_output=True, encoding="utf8", env=env, cwd=cwd, shell=shell)

        except subprocess.TimeoutExpired as e:
            raise MullvadException(e)
        except FileNotFoundError as e:
            raise MullvadException(e)

        # raises subprocess.CalledProcessError if exitcode is not 0
        try:
            result.check_returncode()
        except subprocess.CalledProcessError as e:
            logger.debug(result.stdout)
            logger.debug(result.stderr)
            if raise_on_err:
                raise MullvadException(e)

        return result

    def notify(self, summary: str, body: str, t_ms: int=10000):
        if t_ms >= 0:
            try:
                self.run_cmd(["notify-send", "--app-name=Mullvad", f"--expire-time={t_ms}",
                             f"--urgency=normal", f"Mullvad: {summary}", body])
            except MullvadException as e:
                logger.error(e)

    def group_confs(self, confs: list[str]) -> dict[str,list[str]]:
        """ Group list into dictionaries by country code """
        groups = {}
        for x in confs:
            country = "" # silence linter, unbound blablabla
            try:
                country = x.split("-")[0]
            except IndexError:
                raise MullvadException(f"Failed to get country from config: {x}")

            if not country in groups.keys():
                groups[country] = []
            groups[country].append(x)

        groups_sorted = {}
        for k in sorted(groups.keys()):
            groups_sorted[k] = sorted(groups[k])

        return groups_sorted

    def get_profiles(self) -> dict[str,list[str]]:
        res = self.run_cmd(["nmcli", "connection", "show"])
        wg_confs = [l.split(" ")[0] for l in res.stdout.split("\n") if "wireguard" in l]
        return self.group_confs(wg_confs)

    def get_active_profiles(self):
        res = self.run_cmd(["nmcli", "connection", "show", "--active"])
        return [l.split(" ")[0] for l in res.stdout.split("\n") if "wireguard" in l]

    def disable_profile(self, profile: str):
        self.run_cmd(["nmcli", "connection", "down", profile])
        logger.info(f"Deactivated profile: {profile}")
        self.notify("Deactivated profile", profile)

    def disable_all_active_profiles(self, whitelist: Optional[list[str]]=None):
        for active in self.get_active_profiles():
            if not whitelist or not active in whitelist:
                self.disable_profile(active)

    def enable_profile(self, profile: str):
        """ Enable new connection, disable previous connection """
        self.run_cmd(["nmcli", "connection", "up", profile])
        logger.info(f"Activated profile: {profile}")
        self.notify("Activated profile", profile)


class App(Wireguard):
    def __init__(self) -> None:
        self.parse_args()
        self._history = History(self._path_history, self._max_history)
        self._path_country_codes = Path(os.path.dirname(__file__)) / "country_codes.json"

    def parse_args(self):
        parser = argparse.ArgumentParser(description="Manage wireguard connections")
        parser.add_argument('-t', '--rofi-theme', help="Rofi theme", metavar="THEME", type=str)
        parser.add_argument('-H', '--history-path', help="Path to history file, default=~/.config/rofi_wireguard.history", metavar="FILE", type=Path, default=Path.home() / ".config/rofi_wireguard.history")
        parser.add_argument('-m', '--max-history', help="Maximum amount of history items, default=5", metavar="AMOUNT", type=int, default=5)
        parser.add_argument('-n', '--notify_ms',  help="duration of notification in sec (-1 to disable), default=10", type=int, default=10)
        parser.add_argument('-D', '--debug', help="Enable debugging", action='store_true')
        args = parser.parse_args()

        self._rofi_theme = args.rofi_theme
        self._path_history = args.history_path
        self._max_history = args.max_history

        if args.notify_ms < 0:
            self._t_notify_ms = -1
        else:
            self._t_notify_ms = args.notify_ms * 1000

        if args.debug:
            logger.setLevel(logging.DEBUG)
        else:
            logger.setLevel(logging.INFO)

    def add_history(self, rofi: Rofi):
        """ Add history to rofi """
        if hist := list(reversed(self._history.read())):
            rofi.add_divider(text="history")
            #rofi.add(hist)
            for h in hist:
                rofi.add(h, h)
            rofi.add_divider()

    def add_active(self, rofi: Rofi):
        """ Add active profiles to rofi """
        if profiles := self.get_active_profiles():
            for profile in profiles:
                rofi.add(f"Active: {profile}", None)
        else:
            rofi.add(f"No active profiles", None)

    def add_countries(self, rofi, countries):
        country_map = json.loads(self._path_country_codes.read_text())
        mapped = [[country_map.get(c, c), c] for c in countries]
        mapped_s = sorted(mapped, key=lambda s: s[0])
        for name, country in mapped_s:
            rofi.add(name, country)

    def select_profile(self, profiles):
        """ Select profile using rofi """
        rofi = Rofi(theme=self._rofi_theme)
        #rofi.add(profiles)
        for p in profiles:
            rofi.add(p, p)

        selected_profile = rofi.show()
        if not selected_profile or not selected_profile in profiles:
            logger.debug("no match")
            return
        return selected_profile

    def handle_selected(self, profile: str):
        """ !! First activate and then deactivate all other """
        self.enable_profile(profile)
        self.disable_all_active_profiles(whitelist=[profile])
        self._history.write(profile)

    def run(self):
        wg_confs = self.get_profiles()

        while True:
            rofi = Rofi(theme=self._rofi_theme)

            self.add_active(rofi)
            rofi.add(DISABLE_ALL_STR, DISABLE_ALL_STR)
            self.add_history(rofi)
            self.add_countries(rofi, wg_confs.keys())

            if not (res := rofi.show()):
                return

            if res == DISABLE_ALL_STR:
                self.disable_all_active_profiles()
                return
            elif res in self._history.read():
                self.handle_selected(res)
                break
            elif res in wg_confs.keys():
                if selected_profile := self.select_profile(wg_confs[res]):
                    self.handle_selected(selected_profile)
                    break


logger = logging.getLogger("rofi_mullvad")
ch = logging.StreamHandler()
ch.setFormatter(CustomFormatter())
logger.addHandler(ch)

if __name__ == "__main__":
    app = App()
    try:
        app.run()
    except MullvadException as e:
        logger.error(e)
